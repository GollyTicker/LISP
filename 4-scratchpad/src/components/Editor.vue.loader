<template>
  <div class="box">
    <div class="row flex-fixed">
      <p class="sub-title" style="float:left">Editor</p>
      <p class="sub-title" style="float:right; font-size:0.9em">Ctrl+Enter or <button v-on:click="asyncRequestEvaluation">RUN</button></p>
      <div style="clear: both"></div>
    </div>
    <div class="row flex-floating">
      <code id="edit-text" class="language-lisp code-text" contenteditable
            v-on:paste="pasteEvent"></code>

      <!-- v-on:keyup="updateHighlighting"
      It should be called on change. However doing that
      on every keyup makes the cursor position in the text be reset to the first element.
      Resettting the focus and selection didn't quite work as well... -->
    </div>
  </div>
</template>

<script>

import MiniLISP_HTTP from './../HTTP.js'

const editor = function() { return document.getElementById("edit-text"); }

const resultComponent = function() { return window.ResultComponent; }

export default {
  name: 'Editor',
  mounted() {
    editor().innerText = default_lisp; // set initial text
    updateHighlighting();
  },
  methods: {
    asyncRequestEvaluation: function() {
      updateHighlighting()
      MiniLISP_HTTP.requestBackendEvaluation(
        editor().innerText,
        resultComponent().handleResponseText,
        resultComponent().handleError)
    },
    pasteEvent(event) {
      let paste = (event.clipboardData || window.clipboardData).getData('text');

      const selection = window.getSelection();
      if (!selection.rangeCount) return false;
      selection.deleteFromDocument();
      selection.getRangeAt(0).insertNode(document.createTextNode(paste));
      selection.collapseToEnd()

      event.preventDefault();
    }
  }
}

// the .loader extension runs lisp-loader.hs which replaces
// the string between the tilde with the content of that respective file
const default_lisp = `~src/assets/default.lisp~`

const updateHighlighting = function() {
  /* currect user inserted whitespace. which gets lost with syntax highlighting */
  editor().textContent = editor().innerText

  window.Prism.highlightAll()
}

</script>
